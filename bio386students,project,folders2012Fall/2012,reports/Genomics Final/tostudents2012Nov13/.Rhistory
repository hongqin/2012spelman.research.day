4+6
x<-6
y<-5
z<-y+x
z
y<-4
z<-x+y
z
1(s)
sqrt(16)
x<-c(5,9)
y<-(1,0)
y<-c(1,0)
z<-c(x,y)
x<-1:10
x<-c(5,9)
y<-c(1,0)
x<-1:10
seq(1,9,by=2)
seq(8,20,length=6)
seq(8,20,length=6)
help(average)
??average
x<-c(4,2,6)
y<-c(1,0,-1)
seq(4,2,length=6)
sum(x)
sum(x^2)
x+y
x*y
z<-x*y
z
a<-x+y
b<-x-y
c<-x/y
d<-x^2
e<y^2
e<-y^2
a
b
c
d
e
7:11
seq(2:9)
seq(4:10,by=2)
seq(4:10, by=2)
seq(4,10,by=2)
seq(3,30,length=10)
rep(2,4)
rep(c(1,2),4)
rep(c(1:4)),(4,4)
rep(c(1:4),c(4,4))
rep(c(1,2),c(4,4))
rep(1:4,4)
rep(6,6)
rm(list=ls())
require(GEOquery)
myGSE = "GSE7645"
gset <- getGEO(myGSE, GSEMatrix =TRUE)
if (length(gset) > 1) idx <- grep("GPL90", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
ex <- exprs(gset)
dictionary = gset@featureData@data[, c('ID', 'ORF')]  #This is a lookup table for probe ID and ORF
ORFs = unique(as.character(dictionary$ORF))
yORFs = ORFs[grep( "Y\\w{2}\\d{3}.*", ORFs)]  #these are yeast ORFs
str(yORFs)
setdiff(ORFs, yORFs)
ORFs = yORFs
ex2 = ex[match(ORFs, dictionary$ORF), ]
rownames(ex2) = ORFs
head(ex2)
multipleORFs = NA;
ex3 = ex2 #This is just a template
# orf = 'YLR331C'
for (orf in ORFs) {
myrows = as.character( dictionary$ID[dictionary$ORF==orf] )
if (length(myrows) > 1) {
print (orf)
multipleORFs = c(multipleORFs, orf)
ex[myrows, ] = apply(ex[myrows,], 2, mean)
}else {
ex3[orf, ] = ex[myrows[1], ]
}
}
multipleORFs = multipleORFs[-1]
colSums = apply(ex3, 2, sum)
colSums/1E6
ex3norm = ex3
for( col in 1:length(ex3[1,])) {
ex3norm[,col] = ex3[,col] * max(colSums) / sum(ex3[,col])
}
apply(ex3norm, 2, sum) / max(colSums)
ex3 = ex3norm
hist(ex3[,1], br=100)
ex4 = log2(ex3)
hist(ex4[,3])
ex4[ex4<0] = NA
myVar = apply( ex4, 1, FUN=function(x){var(x, na.rm=T)})
myStddev = sqrt(myVar)
myMean = apply( ex4, 1, FUN=function(x){mean(x, na.rm=T)})
myCV = myStddev / myMean
myarray= data.frame(cbind( myStddev, myMean, myCV))
myarray$ORF = ORFs
myarray = myarray[, c(4, 1:3)]
summary(myarray)
outfilename = paste(myGSE, "_log2CV.csv", sep='')
write.csv(myarray, "JessNCBI_log2CV.csv", row.names=F)
test = read.csv("JessNCBI_log2CV.csv", colClasses = c('character', NA, NA, NA))
hist(test$myCV, br=100)
hist(test$myStddev, br=100)
hist(test$myMean, br=100)
hist(test$myCV, br=100, main="Histogram ofGSE7645 CV Values")
hist(test$myCV, br=100, main="Histogram of GSE7645 CV Values", xlab='CV values')
setwd("C:/Users/Jessica LaChay/Desktop/tostudents2012Nov13")
outfilename = paste(myGSE, "_log2CV.csv", sep='')
write.csv(myarray, "JessNCBI_log2CV.csv", row.names=F)
test = read.csv("JessNCBI_log2CV.csv", colClasses = c('character', NA, NA, NA))
str(test)
hist(test$myCV, br=100, main="Histogram of GSE7645 CV Values", xlab='CV values')
hist(test$myStddev, br=100)
hist(test$myMean, br=100)
CV.tb = read.csv("JessNCBI_log2CV.csv")
CV.tb$ORF = as.character( CV.tb$ORF )
str(CV.tb)
#RLS table
RLS.tb = read.csv("lifespan.csv")
RLS.tb$ORF = as.character(RLS.tb$ORF)
str(RLS.tb)
summary(RLS.tb)
list.files(, pattern="fit")
fit.tb = read.csv("growth.fitness.hom.2012Nov13.csv")
#fit.tb = read.table("Regression_Tc1_hom.txt", sep='\t')
#fit.tb = read.table("Regression_Tc1_hom_2012Nov13.txt", sep="\t", header=T)
fit.tb$ORF = as.character(fit.tb$orf)
str(fit.tb)
fit.tb[fit.tb$ORF=="YDR001C",]
PIN.pairs.tb = read.csv("pairs.csv", colClass=c("character","character")) #Protein network in pairs
str(PIN.pairs.tb)
GIN.pairs.tb = read.csv("sgadata_costanzo2009_stringentCutoff_101120.csv", header=F,
colClass=c("character","character","character","character",NA,NA,NA))
names(GIN.pairs.tb) = c("ORF1", "name1", "ORF2", "name2", "epsilon", "stddev", "p")
#epsilon = fij - fi * fj
PositiveGIN.pairs.tb = GIN.pairs.tb[GIN.pairs.tb$epsilon>0, ]
NegativeGIN.pairs.tb = GIN.pairs.tb[GIN.pairs.tb$epsilon<0, ]
str(PositiveGIN.pairs.tb)
str(NegativeGIN.pairs.tb)
RLS.tb2 = merge(RLS.tb, CV.tb)
summary(lm(RLS.tb2$RLS_Del_alpha ~ RLS.tb2$myStddev))
summary(lm(RLS.tb2$RLS_Del_alpha ~ RLS.tb2$myMean))
m = lm(RLS.tb2$RLS_Del_alpha ~ RLS.tb2$myCV)
summary(m)
plot( RLS.tb2$RLS_Del_alpha ~ RLS.tb2$myCV  )
abline(m, col='red')
plot( RLS.tb2$RLS_Del_alpha ~ RLS.tb2$myCV, main="GSE7645 CV vs. RLS", ylab='RLS', xlab='CV'  )
abline(m, col='red')
m = lm(RLS.tb2$RLS_Del.pooled  ~ RLS.tb2$myCV)
summary(m)
fit.tb2 = merge(CV.tb, fit.tb)
m=lm(fit.tb2$YPD ~ fit.tb2$myCV); summary(m)
plot( YPD ~ myCV, data=fit.tb2)
abline(m, col="red")
plot( YPD ~ myCV, data=fit.tb2 , xlab='CV', main='GSE7645 CV vs. YPD')
abline(m, col="red")
str(PIN.pairs.tb)
longPids = c(PIN.pairs.tb$ORF1, PIN.pairs.tb$ORF2)
degree = table( longPids );
sum(degree); #check the counting result, the length of ids
length(longPids)
PIN = data.frame(degree);
PIN$ORF = as.character( PIN$longPids); #make sure gene names are "characters"
PIN = PIN[, c(3,2)]; #remove the first column of unecessary data
str(PIN)
positiveGids = c(PositiveGIN.pairs.tb$ORF1, PositiveGIN.pairs.tb$ORF2 )
negativeGids = c(NegativeGIN.pairs.tb$ORF1, NegativeGIN.pairs.tb$ORF2 )
plusGIN = data.frame(table(positiveGids ) );
minusGIN = data.frame(table(negativeGids ) )
names(plusGIN) = c("ORF", "plusGDegree")
names(minusGIN) = c("ORF", "minusGDegree")
plusGIN$ORF = as.character( plusGIN$ORF )
minusGIN$ORF = as.character( minusGIN$ORF )
GIN = merge(plusGIN, minusGIN)
str(GIN)
str(PIN)
RLS.tb2$pDegree =  PIN$Freq[ match(RLS.tb2$ORF, PIN$ORF) ]
RLS.tb2 = merge( RLS.tb2, GIN)
RLS.tb2 = merge(RLS.tb2, fit.tb)
summary(lm(RLS_Del_alpha ~ pDegree, data=RLS.tb2))
summary(lm(RLS_Del_alpha ~ plusGDegree, data=RLS.tb2))
summary(lm(RLS_Del_alpha ~ minusGDegree, data=RLS.tb2))
summary(lm(RLS_Del_alpha ~ myCV, data=RLS.tb2))
summary(lm(RLS_Del_alpha ~ myCV + pDegree + plusGDegree + minusGDegree, data=RLS.tb2))
summary(lm( myCV ~ RLS_Del_alpha + pDegree + plusGDegree + minusGDegree, data=RLS.tb2))
summary(lm( RLS_Del_alpha ~ myCV + pDegree + YPE + + plusGDegree + minusGDegree, data=RLS.tb2))
summary(lm( RLS_Del_alpha ~ YPD, data=RLS.tb2))
summary(lm( RLS_Del_alpha ~ YPG, data=RLS.tb2))
summary(lm( RLS_Del_alpha ~ YPE, data=RLS.tb2))
summary(lm( RLS_Del_alpha ~ myCV  + YPD + YPE + YPG, data=RLS.tb2))
summary(lm( myCV ~ RLS_Del_alpha  + YPD + YPE + YPG, data=RLS.tb2))
summary(lm( myCV ~ RLS_Del_alpha  + YPD + YPE + YPG, data=RLS.tb2))
CV.tb = read.csv("JessNCBI_log2CV.csv")
CV.tb$ORF = as.character( CV.tb$ORF )
str(CV.tb)
PIN.pairs.tb = read.csv("pairs.csv", colClass=c("character","character")) #Protein network in pairs
str(PIN.pairs.tb)
GIN.pairs.tb = read.csv("sgadata_costanzo2009_stringentCutoff_101120.csv", header=F,
colClass=c("character","character","character","character",NA,NA,NA))
names(GIN.pairs.tb) = c("ORF1", "name1", "ORF2", "name2", "epsilon", "stddev", "p")
#epsilon = fij - fi * fj
PositiveGIN.pairs.tb = GIN.pairs.tb[GIN.pairs.tb$epsilon>0, ]
NegativeGIN.pairs.tb = GIN.pairs.tb[GIN.pairs.tb$epsilon<0, ]
str(PositiveGIN.pairs.tb)
str(NegativeGIN.pairs.tb)
diff.Value = function( inpairs, inData ) { #inData must in "ORF', "Value" format
inpairs$Value1= inData$Value[match(inpairs$ORF1, inData$ORF)];
inpairs$Value2= inData$Value[match(inpairs$ORF2, inData$ORF)];
ret = mean( abs( inpairs$Value1 - inpairs$Value2 ), na.rm=T );
}
call.diff.Value.in.permuted.pairs = function( orig.pairs, inData, inNsims) {
Nsims = inNsims; #number of permutations
permutated.diff.values = numeric( Nsims )
); #
call.diff.Value.in.permuted.pairs = function( orig.pairs, inData, inNsims) {
Nsims = inNsims; #number of permutations
permutated.diff.values = numeric( Nsims );
ids.orig = c( orig.pairs$ORF1, orig.pairs$ORF2 );
len = length( ids.orig );
for( i in 1:Nsims ) {
newids = sample( ids.orig );
ORF1 = newids[1: (len/2)];   # split the long to two columns, 1st half
ORF2 = newids[ (len/2+1) : len];
new.pairs = data.frame( cbind(ORF1, ORF2) );
permutated.diff.values[i] = diff.Value( new.pairs, inData );
}
return( permutated.diff.values )
}
inData = CV.tb[, c(1,4)]; names(inData) = c("ORF", "Value")
diff.CV.obs = diff.Value ( PIN.pairs.tb, inData );
permutated.diff.CV = call.diff.Value.in.permuted.pairs( PIN.pairs.tb, inData, 1000)
hist(permutated.diff.CV)
sub = permutated.diff.CV[ permutated.diff.CV < diff.CV.obs ]
p.Value = length(sub) / length(permutated.diff.CV);
if(p.Value == 0) { p.Value = 1 / length(permutated.diff.CV)}
mylim = c(min(c(permutated.diff.CV, diff.CV.obs))*0.95, max(c(permutated.diff.CV, diff.CV.obs))*1.05 )
hist( permutated.diff.CV, xlim=c(mylim ), br=20, main="PIN" );
arrows( diff.CV.obs, 50, diff.CV.obs, 2, col="red" );
text( diff.CV.obs, 50.5, "obs");
p.value;
hist( permutated.diff.CV, xlim=c(mylim ), br=20, main="PIN", xlab='Permutated Difference CV' );
arrows( diff.CV.obs, 50, diff.CV.obs, 2, col="red" );
text( diff.CV.obs, 50.5, "obs");
PositiveGIN.pairs.tb = GIN.pairs.tb[GIN.pairs.tb$epsilon>0, c("ORF1", "ORF2") ]
str(PositiveGIN.pairs.tb)
inData = CV.tb[, c(1,4)]; names(inData) = c("ORF", "Value")
diff.CV.obs = diff.Value ( PositiveGIN.pairs.tb, inData );
permutated.diff.CV = call.diff.Value.in.permuted.pairs( PositiveGIN.pairs.tb, inData, 1000)
hist(permutated.diff.CV)
sub = permutated.diff.CV[ permutated.diff.CV < diff.CV.obs ]
p.Value = length(sub) / length(permutated.diff.CV);
mylim = c(min(c(permutated.diff.CV, diff.CV.obs))*0.95, max(c(permutated.diff.CV, diff.CV.obs))*1.05 )
hist( permutated.diff.CV, xlim=c(mylim ), br=20, main="PositiveGIN" );
arrows( diff.CV.obs, 50, diff.CV.obs, 2, col="red" );
text( diff.CV.obs, 50.5, "obs");
NegativeGIN.pairs.tb = GIN.pairs.tb[GIN.pairs.tb$epsilon<0, c("ORF1", "ORF2") ]
str(PositiveGIN.pairs.tb)
inData = CV.tb[, c(1,4)]; names(inData) = c("ORF", "Value")
diff.CV.obs = diff.Value ( NegativeGIN.pairs.tb, inData );
permutated.diff.CV = call.diff.Value.in.permuted.pairs( NegativeGIN.pairs.tb, inData, 1000)
hist(permutated.diff.CV)
sub = permutated.diff.CV[ permutated.diff.CV < diff.CV.obs ]
p.Value = length(sub) / length(permutated.diff.CV);
mylim = c(min(c(permutated.diff.CV, diff.CV.obs))*0.95, max(c(permutated.diff.CV, diff.CV.obs))*1.05 )
hist( permutated.diff.CV, xlim=c(mylim ), br=20, main="PIN" );
arrows( diff.CV.obs, 50, diff.CV.obs, 2, col="red" );
text( diff.CV.obs, 50.5, "obs");
hist( permutated.diff.CV, xlim=c(mylim ), br=20, main="Negative Gene Interaction Network",xlab='Permutated Difference of CV' );
arrows( diff.CV.obs, 50, diff.CV.obs, 2, col="red" );
text( diff.CV.obs, 50.5, "obs");
