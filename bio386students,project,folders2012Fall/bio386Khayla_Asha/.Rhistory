x=c(1,2,3,4 );
u=even_total(x);
x=c(1,2,3,4 )
x=c(1,2,3,4 )
x = rnorm(10);
x = rnorm(10);
#write a loof to print out every element of x
for (i in 1:10){
print(x)}
x = rnorm(10);
#write a loof to print out every element of x
for (i in 1:10){
print(x)}
for (i in 10)}
print (3)
x = rnorm(10);
#write a loof to print out every element of x
for (i in 1:10){
print(x)}
for (i in 10){
print (3)}
x = rnorm(10);
#write a loof to print out every element of x
for (i in 1:10){
print(x)}
for (i in 10){
print (3)}
for (i in 1:1){
print(1)}
?rnorm
?i
??i
}
}
x = c(1, 2, 3, 4); #this is a global variable
y = c(-1, -2, -3, -4) #this is also a global one
y, outside = y;
take_uphalf = function (x) {
y = c(); # a local copy inside of loop
xbar = mean(x);
for( i in 1]length(x)) {
if ( x[i] > xbar ) {
y = c(y, x[i] );
}
}
y, inside = y;
y; #the lost line, return y tothe main program
3 s is mM, y is mL
x s is mM, y is mL
}
}
#x is mM, y is mL}
#x is mM, y is mL}
molar_solution = function( x, y) {
molar_solution = function([1,100] x, y) {
molar_solution = function([1,100] x, y) {
# x is mM, y is mL
# x is mM, y is mL
# x is mM, y is mL
y = 5,500
y = 5,500
y = 5,500
}
y = 500
y = 500
y = 500
molar_solution = function(x, y){
# x is mM, y is ml
x = 1,100
y = 500
}
molar_solution = function(x, y){
58.433 * x * y / 10^6
}
molar_solution(1000,1000)
concentration = 100 #mM
volume = 500 #mL
NaCl = molar_solution(concentration, volume)
volume = 500 #mL
molar_solution = function(x, y){
58.433 * x * y / 10^6
}
molar_solution(1000,1000)
concentration = 100 #mM
volume = 500 #mL
NaCl = molar_solution(concentration, volume)
FW * x * y / 10^6
FW * x * y / 10^6
FW*x*y/10^6
FW*x*y/10^6
74*x*y/10^6
645*x*y/10^6
}
}
}
names(FWs) = c('NaCl', 'KCL', )
#install packages
require.packages("ape");
install.packages("ape")
install.packages("seqinr")
require.packages("ape");
require.packages("seqinr");
#load packages
library(ape);
library(seqinr);
#what's in the package?
help(package=ape);
help(package=seqinr);
#you should also read the manual of the packages
#### a simple example
library(seqinr);
tablecode(); #the genetic code
# read in some bacterial 16s rDNA sequences
seqs = read.fasta( "http://www.bioinformatics.org/ctls/download/data/16srDNA.fasta",seqtype="DNA");
seq1 = seqs[[1]]
table( seq1 ); #nucleotide composition
GC(seq1);  # GC content
# a loop for all sequences
num = 1:length(seqs);
gc  = 1:length(seqs);
out = data.frame( cbind( num, gc ) );
for( i in 1:length(seqs) ) {
out$gc[i] = GC( seqs[[i]] );
}
out;
write.csv(out, "gc.csv", row.names=F) # output the results
#2012 Nov 2
#2012 Nov 2
rm(list=ls())
require(GEOquery)
#http://www.ncbi.nlm.nih.gov/geo/browse/
#GEO2R
myGSE = "GSE18334"
gset <- getGEO(myGSE, GSEMatrix =TRUE)
if (length(gset) > 1) idx <- grep("GPL90", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
ex <- exprs(gset) #This is the expression matrix
#########
# Find out probes and ORFs
dictionary = gset@featureData@data[, c('ID', 'ORF')]  #This is a lookup table for probe ID and ORF
ORFs = unique(as.character(dictionary$ORF))
yORFs = ORFs[grep( "Y\\w{2}\\d{3}.*", ORFs)]  #these are yeast ORFs
str(yORFs)
setdiff(ORFs, yORFs)
ORFs = yORFs
#########
# A simple approach to create an expression matrix with ORFs as row names
# This approach takes only one probe for each ORFs, which is often true for cDNA arrays
ex2 = ex[match(ORFs, dictionary$ORF), ]
rownames(ex2) = ORFs
head(ex2) #Now, expression matrix is named by ORFs
##########
#Another approach is to calculate the average sigals for all the probes in the same ORFs
multipleORFs = NA;
ex3 = ex2 #This is just a template
# orf = 'YLR331C'
for (orf in ORFs) {
myrows = as.character( dictionary$ID[dictionary$ORF==orf] )
if (length(myrows) > 1) {
print (orf)
multipleORFs = c(multipleORFs, orf)
ex[myrows, ] = apply(ex[myrows,], 2, mean)
}else {
ex3[orf, ] = ex[myrows[1], ]
}
}
multipleORFs = multipleORFs[-1]
######
#normalizaion
colSums = apply(ex3, 2, sum)
colSums/1E6
ex3norm = ex3
for( col in 1:length(ex3[1,])) {
ex3norm[,col] = ex3[,col] * max(colSums) / sum(ex3[,col])
}
apply(ex3norm, 2, sum) / max(colSums)
ex3 = ex3norm
#########
# now, have a look at the signals
hist(ex3[,1], br=100)
ex4 = log2(ex3)
hist(ex4[,3])
ex4[ex4<0] = NA #remove backgrounds
#############
#calculate coefficient of variation
myVar = apply( ex4, 1, FUN=function(x){var(x, na.rm=T)})
myStddev = sqrt(myVar)
myMean = apply( ex4, 1, FUN=function(x){mean(x, na.rm=T)})
myCV = myStddev / myMean
myarray= data.frame(cbind( myStddev, myMean, myCV))
myarray$ORF = ORFs
myarray = myarray[, c(4, 1:3)]
summary(myarray)
outfilename = paste(myGSE, "_log2CV.csv", sep='')
write.csv(myarray, "GSE3821_log2CV.csv", row.names=F)
test = read.csv("GSE3821_log2CV.csv", colClasses = c('character', NA, NA, NA))
str(test)
hist(test$myCV, br=100)
hist(test$myStddev, br=100)
hist(test$myMean, br=100)
gset <- getGEO("GSE18334", GSEMatrix =TRUE)
ex <- exprs(gset) #This is the expression matrix
str(ex)
head(ex)
str(gset)
dictionary = gset@featureData@data[, c('ID', 'ORF')]  #This is a lookup table for probe ID and ORF
ORFs = unique(as.character(dictionary$ORF))
str(ORFs)
yORFs = ORFs[grep( "Y\\w{2}\\d{3}.*", ORFs)]  #these are yeast ORFs
str(yORFs)
setdiff(ORFs, yORFs)
str(ex)
ex2 = ex[match(ORFs, dictionary$ORF), ]
str(ex)
ex2 = ex[match(ORFs, dictionary$ORF), ]
str(ex2)
rownames(ex2) ORF
rownames(ex2) = ORF
multipleORFs = NA;
ex3 = ex2 #This is just a template
# orf = 'YLR331C'
myrows = as.character( dictionary$ID[dictionary$ORF==orf] )
myrows
for (orf in ORFs) {
myrows = as.character( dictionary$ID[dictionary$ORF==orf] )
if (length(myrows) > 1) {
print (orf)
multipleORFs = c(multipleORFs, orf)
ex[myrows, ] = apply(ex[myrows,], 2, mean)
}else {
ex3[orf, ] = ex[myrows[1], ]
}
}
multipleORFs = multipleORFs[-1]
colSums = apply(ex3, 2, sum)
for( col in 1:length(ex3[1,])) {
ex3norm[,col] = ex3[,col] * max(colSums) / sum(ex3[,col])
}
hist(ex3[,1], br=100)
ex4 = log2(ex3)
hist(ex4[,3])
hist(ex3[,1], br=100)
ex4 = log2(ex3)
hist(ex4[,3])
ex4[ex4<0] = NA #remove backgrounds
myVar = apply( ex4, 1, FUN=function(x){var(x, na.rm=T)})
head(myVar)
myStddev = sqrt(myVar)
myMean = apply( ex4, 1, FUN=function(x){mean(x, na.rm=T)})
myCV = myStddev / myMean
myarray= data.frame(cbind( myStddev, myMean, myCV))
myarray$ORF = ORFs
head(myarray)
write.csv(myarray, "GSE18334_log2CV.csv", row.names=F)
test = read.csv("GSE18334_log2CV.csv", colClasses = c('character', NA, NA, NA))
str(test)
hist(test$myCV, br=100)
rownames(ex2) = ORFs
rownames(ex2) = ORFs
rownames(ex2) = ORFs
rm(list=ls())
require(GEOquery)
#http://www.ncbi.nlm.nih.gov/geo/browse/
#GEO2R
myGSE = "GSE18334"
gset <- getGEO(myGSE, GSEMatrix =TRUE)
if (length(gset) > 1) idx <- grep("GPL90", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
ex <- exprs(gset) #This is the expression matrix
# Find out probes and ORFs
dictionary = gset@featureData@data[, c('ID', 'ORF')]  #This is a lookup table for probe ID and ORF
ORFs = unique(as.character(dictionary$ORF))
yORFs = ORFs[grep( "Y\\w{2}\\d{3}.*", ORFs)]  #these are yeast ORFs
str(yORFs)
setdiff(ORFs, yORFs)
ORFs = yORFs
#########
# A simple approach to create an expression matrix with ORFs as row names
# This approach takes only one probe for each ORFs, which is often true for cDNA arrays
ex2 = ex[match(ORFs, dictionary$ORF), ]
rownames(ex2) = ORFs
head(ex2) #Now, expression matrix is named by ORFs
multipleORFs = NA;
ex3 = ex2 #This is just a template
# orf = 'YLR331C'
for (orf in ORFs) {
myrows = as.character( dictionary$ID[dictionary$ORF==orf] )
if (length(myrows) > 1) {
print (orf)
multipleORFs = c(multipleORFs, orf)
ex[myrows, ] = apply(ex[myrows,], 2, mean)
}else {
ex3[orf, ] = ex[myrows[1], ]
}
}
multipleORFs = multipleORFs[-1]
#normalizaion
colSums = apply(ex3, 2, sum)
colSums/1E6
ex3norm = ex3
for( col in 1:length(ex3[1,])) {
ex3norm[,col] = ex3[,col] * max(colSums) / sum(ex3[,col])
}
apply(ex3norm, 2, sum) / max(colSums)
ex3 = ex3norm
hist(ex3[,1], br=100)
ex4 = log2(ex3)
hist(ex4[,3])
ex4[ex4<0] = NA #remove backgrounds
myVar = apply( ex4, 1, FUN=function(x){var(x, na.rm=T)})
myStddev = sqrt(myVar)
myMean = apply( ex4, 1, FUN=function(x){mean(x, na.rm=T)})
myCV = myStddev / myMean
myarray= data.frame(cbind( myStddev, myMean, myCV))
myarray$ORF = ORFs
myarray = myarray[, c(4, 1:3)]
summary(myarray)
CV.tb = read.csv("GSE18334_log2CV.csv")  #CV table
CV.tb$ORF = as.character( CV.tb$ORF )
str(CV.tb)
sub = permutated.diff.CV[ permutated.diff.CV < diff.CV.obs ]
p.K = length(sub) / length(permutated.diff.CV);
plusGIN = data.frame(table(positiveGids ) );
minusGIN = data.frame(table(negativeGids ) )
names(plusGIN) = c("ORF", "plusGDegree")
names(minusGIN) = c("ORF", "minusGDegree")
plusGIN$ORF = as.character( plusGIN$ORF )
minusGIN$ORF = as.character( minusGIN$ORF )
GIN = merge(plusGIN, minusGIN)
#merge GIN, PIN to RLS
str(GIN)
str(PIN)
RLS.tb2$pDegree =  PIN$Freq[ match(RLS.tb2$ORF, PIN$ORF) ]
RLS.tb2 = merge( RLS.tb2, GIN)
RLS.tb2 = merge(RLS.tb2, fit.tb)
str(PIN.pairs.tb)
longPids = c(PIN.pairs.tb$ORF1, PIN.pairs.tb$ORF2)
degree = table( longPids );
sum(degree); #check the counting result, the length of ids
length(longPids)
rm(list=ls())
setwd("~/Dropbox/courses.student.research.dp/bio386,2012Fall/final.project")
list.files()
list.files(, pattern="GSE18334")
CV.tb = read.csv("GSE18334_log2CV.csv")  #CV table
CV.tb$ORF = as.character( CV.tb$ORF )
str(CV.tb)
RLS.tb = read.csv("lifespan.csv")
RLS.tb$ORF = as.character(RLS.tb$ORF)
str(RLS.tb)
summary(RLS.tb)
RLS.tb = read.csv("lifespan.csv")
RLS.tb$ORF = as.character(RLS.tb$ORF)
str(RLS.tb)
summary(RLS.tb)
rm(list=ls())
setwd("~/Dropbox/bio386Khayla_Asha")
list.files()
list.files(, pattern="GSE")
#gene expression CV table
CV.tb = read.csv("GSE18334_log2CV.csv")  #CV table
#3821: wildtype, Study of the short term (within the first 330 seconds) transcriptional response of S.cerevisiae upon a sudden addition of glucose.
#Keywords: glucose pulse, chemostat culture, glucose catabolite repression
CV.tb = read.csv("GSE18334_log2CV.csv")  #Khayla, small p in +GIN, PIN?
#18332: Profiling oxidative stress in Saccharomyces cerevisiae by oxidation of transcription factor Swi6p
#mutants of Swi6 ?
CV.tb = read.csv("GSE12221_log2CV.csv")  #Jasmine, small p in -GIN, PIN
#12221: Decay profiles of Saccharomyces cerevisiae mRNAs following oxidative stress and DNA damage
#Wildtype strains ?
#oxidative stress (0.3mM hydrogen peroxide) or DNA damage (0.1% methyl methanesulfonate)
#QIN: 12221 and 7645 give opposit patterns. So, removal of DNA stress from 12221
# and reco comparison will be need to further clarification.
CV.tb = read.csv("GSE33276_log2CV.csv")  #Asha, p<0.001 PIN?, p=0.046 -GIN,
#33276, wildyptes, Gene expression profiles of S. cerevisiae under heat stress
CV.tb = read.csv("GSE7645_log2CV.csv")  #jessica, small p PIN, p=0.999 +GIN, p<0.001 -GIN
#7645: CHP?, Expression data for Saccharomyces cerevisiae oxidative stress response
#strains
CV.tb$ORF = as.character( CV.tb$ORF )
str(CV.tb)
#RLS table
#RLS.tb = read.csv("lifespan.csv")
#RLS.tb$ORF = as.character(RLS.tb$ORF)
#str(RLS.tb)
#summary(RLS.tb)
#protein network in pairs
PIN.pairs.tb = read.csv("pairs.csv", colClass=c("character","character")) #Protein network in pairs
str(PIN.pairs.tb)
#genetic network in pairs
GIN.pairs.tb = read.csv("sgadata_costanzo2009_stringentCutoff_101120.csv", header=F,
colClass=c("character","character","character","character",NA,NA,NA))
names(GIN.pairs.tb) = c("ORF1", "name1", "ORF2", "name2", "epsilon", "stddev", "p")
#epsilon = fij - fi * fj
PositiveGIN.pairs.tb = GIN.pairs.tb[GIN.pairs.tb$epsilon>0, ]
NegativeGIN.pairs.tb = GIN.pairs.tb[GIN.pairs.tb$epsilon<0, ]
str(PositiveGIN.pairs.tb)
str(NegativeGIN.pairs.tb)
#######################
# First, define a generic function to calculate difference in pairs of proteins,
diff.Value = function( inpairs, inData ) { #inData must in "ORF', "Value" format
inpairs$Value1= inData$Value[match(inpairs$ORF1, inData$ORF)];
inpairs$Value2= inData$Value[match(inpairs$ORF2, inData$ORF)];
ret = mean( abs( inpairs$Value1 - inpairs$Value2 ), na.rm=T );
}
#Qin's first attempt for a generic permutation test function
call.diff.Value.in.permuted.pairs = function( orig.pairs, inData, inNsims) {
Nsims = inNsims; #number of permutations
permutated.diff.values = numeric( Nsims ); #empty vector to store calculations
#merge two columns to a single columns for 'sample' function
ids.orig = c( orig.pairs$ORF1, orig.pairs$ORF2 );
len = length( ids.orig );
# Now do N simulations
for( i in 1:Nsims ) {
newids = sample( ids.orig ); #permutation is done here.
# newids is a single column vector
#now, reformat newids to two columns (random pairs)
ORF1 = newids[1: (len/2)];   # split the long to two columns, 1st half
ORF2 = newids[ (len/2+1) : len]; # the second hard
#Convert them back spreadsheet, (the random network in pairs)
new.pairs = data.frame( cbind(ORF1, ORF2) );
#calculate delta.K for one random network
permutated.diff.values[i] = diff.Value( new.pairs, inData );
}
return( permutated.diff.values )
} #end of permutation function
#################### calculate the observed difference in PIN
#convert CV data to "ORF" and "Value"
inData = CV.tb[, c(1,4)]; names(inData) = c("ORF", "Value")
diff.CV.obs = diff.Value ( PIN.pairs.tb, inData );
permutated.diff.CV = call.diff.Value.in.permuted.pairs( PIN.pairs.tb, inData, 1000)
hist(permutated.diff.CV)
# calulate p-value
sub = permutated.diff.CV[ permutated.diff.CV < diff.CV.obs ]
p.Value = length(sub) / length(permutated.diff.CV);
if(p.Value == 0) { p.Value = 1 / length(permutated.diff.CV)}
# generate a figure
mylim = c(min(c(permutated.diff.CV, diff.CV.obs))*0.95, max(c(permutated.diff.CV, diff.CV.obs))*1.05 )
hist( permutated.diff.CV, xlim=c(mylim ), br=20, main="PIN" );
arrows( diff.CV.obs, 50, diff.CV.obs, 2, col="red" );
text( diff.CV.obs, 50.5, "obs");
#################### calculate the observed difference in Positive GIN
PositiveGIN.pairs.tb = GIN.pairs.tb[GIN.pairs.tb$epsilon>0, c("ORF1", "ORF2") ]
str(PositiveGIN.pairs.tb)
inData = CV.tb[, c(1,4)]; names(inData) = c("ORF", "Value")
diff.CV.obs = diff.Value ( PositiveGIN.pairs.tb, inData );
permutated.diff.CV = call.diff.Value.in.permuted.pairs( PositiveGIN.pairs.tb, inData, 1000)
hist(permutated.diff.CV)
# calulate p-value
sub = permutated.diff.CV[ permutated.diff.CV < diff.CV.obs ]
p.Value = length(sub) / length(permutated.diff.CV);
# generate a figure
mylim = c(min(c(permutated.diff.CV, diff.CV.obs))*0.95, max(c(permutated.diff.CV, diff.CV.obs))*1.05 )
hist( permutated.diff.CV, xlim=c(mylim ), br=20, main="PositiveGIN" );
arrows( diff.CV.obs, 50, diff.CV.obs, 2, col="red" );
text( diff.CV.obs, 50.5, "obs");
#################### calculate the observed difference in Negative GIN
NegativeGIN.pairs.tb = GIN.pairs.tb[GIN.pairs.tb$epsilon<0, c("ORF1", "ORF2") ]
str(PositiveGIN.pairs.tb)
inData = CV.tb[, c(1,4)]; names(inData) = c("ORF", "Value")
diff.CV.obs = diff.Value ( NegativeGIN.pairs.tb, inData );
permutated.diff.CV = call.diff.Value.in.permuted.pairs( NegativeGIN.pairs.tb, inData, 1000)
hist(permutated.diff.CV)
# calulate p-value
sub = permutated.diff.CV[ permutated.diff.CV < diff.CV.obs ]
p.Value = length(sub) / length(permutated.diff.CV);
# generate a figure
mylim = c(min(c(permutated.diff.CV, diff.CV.obs))*0.95, max(c(permutated.diff.CV, diff.CV.obs))*1.05 )
hist( permutated.diff.CV, xlim=c(mylim ), br=20, main="PIN" );
arrows( diff.CV.obs, 50, diff.CV.obs, 2, col="red" );
text( diff.CV.obs, 50.5, "obs");
fix(mylim)
fix(permutated.diff.CV)
